2 ТЕХНОЛОГИЧЕСКИЙ СТЕК

2.1 Базовые технологии

В основе разработанной серверной части приложения лежат современные технологии, которые обеспечивают надежность, производительность и масштабируемость системы. Ключевой технологией разработки является Java 17, которая предоставляет богатые возможности для создания высоконагруженных серверных приложений.

2.1.1 Java 17

Выбор Java 17 в качестве основного языка программирования обусловлен следующими факторами:

- Долгосрочная поддержка (LTS) обеспечивает стабильность и безопасность
- Высокая производительность виртуальной машины (JVM)
- Богатая стандартная библиотека
- Сильная типизация, что уменьшает количество ошибок на этапе компиляции
- Автоматическое управление памятью (сборка мусора)
- Многопоточность и поддержка параллельного выполнения
- Масштабная экосистема библиотек и фреймворков

В разработке активно используются новые возможности Java 17, в том числе:
- Sealed классы для моделирования ограниченных иерархий
- Pattern matching для switch выражений
- Текстовые блоки для удобной работы с многострочным текстом
- Records для создания неизменяемых классов данных
- Усовершенствованные NullPointerException с более информативными сообщениями

2.1.2 Spring Boot 3.4.1

Основным фреймворком для разработки серверной части приложения является Spring Boot 3.4.1, который предоставляет комплексное решение для создания автономных, продакшн-готовых приложений на основе Spring Framework. Spring Boot существенно упрощает процесс разработки за счет автоматической конфигурации и устранения необходимости в ручной настройке множества компонентов.

Ключевые преимущества использования Spring Boot:

- Упрощенная конфигурация (принцип "convention over configuration")
- Встроенный сервер приложений (Tomcat, Jetty или Undertow)
- Автоконфигурация компонентов на основе зависимостей в проекте
- Готовые компоненты для решения типовых задач (security, data access, web и др.)
- Поддержка метрик и мониторинга через Spring Boot Actuator
- Удобная интеграция с внешними системами и сервисами
- Обширная документация и активное сообщество

В проекте используются следующие ключевые модули Spring Boot:

1. Spring Boot Starter Web
Предоставляет все необходимые зависимости для создания веб-приложения, включая встроенный Tomcat сервер, Spring MVC и другие компоненты для работы с HTTP.

2. Spring Boot Starter Data JPA
Обеспечивает интеграцию с JPA (Java Persistence API) для работы с реляционными базами данных. Включает Hibernate как реализацию JPA по умолчанию и упрощает создание репозиториев для доступа к данным.

3. Spring Boot Starter Security
Предоставляет функционал аутентификации и авторизации на основе Spring Security, что позволяет защитить приложение от распространенных уязвимостей веб-безопасности.

4. Spring Boot Starter Validation
Включает поддержку валидации на основе Bean Validation API (JSR 380), что позволяет декларативно определять правила валидации для объектов модели.

5. Spring Boot Starter Cache
Обеспечивает поддержку кеширования данных для оптимизации производительности приложения.

6. Spring Boot Starter WebSocket
Предоставляет функционал для реализации двусторонней коммуникации между клиентом и сервером через протокол WebSocket.

7. Spring Boot Starter Mail
Включает необходимые зависимости для отправки электронной почты из приложения.

8. Spring Boot Starter AMQP
Обеспечивает интеграцию с брокерами сообщений, поддерживающими протокол AMQP (Advanced Message Queuing Protocol), такими как RabbitMQ.

9. Spring Boot Starter AOP
Предоставляет возможности аспектно-ориентированного программирования для разделения сквозных функциональностей.

10. Spring Boot Starter Actuator
Обеспечивает мониторинг и управление приложением в среде продакшн, предоставляя различные метрики и возможности для проверки состояния системы.

2.1.3 Gradle

Для управления зависимостями и автоматизации сборки проекта используется Gradle с применением Kotlin DSL (build.gradle.kts). Gradle обеспечивает гибкое и эффективное управление жизненным циклом проекта, включая компиляцию, тестирование, упаковку и развертывание.

Основные преимущества Gradle:

- Декларативное описание зависимостей и процесса сборки
- Поддержка многомодульных проектов
- Инкрементальная компиляция для ускорения процесса сборки
- Развитая система управления зависимостями
- Гибкость настройки процесса сборки
- Встроенная поддержка репозиториев Maven и Ivy
- Расширяемость через систему плагинов

В проекте используются следующие плагины Gradle:

- org.springframework.boot - для создания исполняемых JAR-файлов
- io.spring.dependency-management - для управления версиями зависимостей Spring
- io.freefair.lombok - для интеграции с Lombok
- com.github.ben-manes.versions - для отслеживания обновлений зависимостей

2.1.4 Docker и контейнеризация

Для упрощения развертывания и обеспечения единообразия окружения разработки и продакшн используется Docker. Разработанное приложение упаковывается в Docker-контейнер, что обеспечивает следующие преимущества:

- Изоляция приложения и его зависимостей
- Единообразие окружения на всех стадиях жизненного цикла
- Простое масштабирование через репликацию контейнеров
- Эффективное использование ресурсов
- Быстрый запуск и остановка
- Декларативное описание инфраструктуры через Dockerfile

Для оркестрации контейнеров используется Docker Compose, который позволяет определить и запустить многоконтейнерные приложения. В docker-compose.yml файле определены следующие сервисы:

- Серверное приложение Spring Boot
- PostgreSQL база данных
- RabbitMQ для обработки асинхронных сообщений
- Серверы кеширования
- Средства мониторинга (Prometheus, Grafana)

2.2 Система управления базами данных

2.2.1 PostgreSQL

В качестве основной системы управления базами данных выбрана PostgreSQL - мощная объектно-реляционная СУБД с открытым исходным кодом. Выбор PostgreSQL обусловлен следующими факторами:

- Высокая надежность и устойчивость к сбоям
- Соответствие стандарту ANSI SQL
- Поддержка сложных типов данных и расширений
- Мощные возможности индексации, включая полнотекстовый поиск
- Поддержка JSON и других нереляционных типов данных
- Механизмы для обеспечения целостности данных
- Расширяемость через пользовательские функции и типы
- Хорошая производительность при высоких нагрузках
- Активное сообщество и регулярные обновления

В проекте используются следующие возможности PostgreSQL:

1. Полнотекстовый поиск (Full-Text Search) для эффективного поиска по текстовым полям (названия, описания, теги)

2. GIN индексы для ускорения полнотекстового поиска и запросов к массивам (например, теги)

3. JSONB тип данных для хранения структурированных данных с возможностью гибкого поиска

4. Геопространственное расширение PostGIS для работы с географическими данными и поиска по местоположению

5. Триггеры для автоматического обновления зависимых данных и поддержания целостности

6. Материализованные представления для оптимизации сложных запросов

7. Оконные функции для аналитических запросов и формирования рекомендаций

8. Хранимые процедуры для централизации бизнес-логики на уровне базы данных

Структура базы данных включает следующие основные таблицы:

- users - информация о пользователях
- pins - данные пинов (изображений)
- boards - доски (коллекции) пользователей
- pictures - метаданные изображений
- posts - публикации пользователей
- follows - подписки между пользователями
- comments - комментарии к пинам и постам
- likes - лайки пинов и постов
- notifications - уведомления пользователей
- locations - географические данные
- tags - теги для категоризации контента
- refresh_tokens - токены обновления для аутентификации
- verification_tokens - токены для верификации учетных записей
- fcm_tokens - токены для пуш-уведомлений

2.2.2 Миграции базы данных

Для управления схемой базы данных и обеспечения её эволюции без потери данных используется система миграций. Миграции определяют изменения схемы базы данных в виде SQL-скриптов или программного кода и выполняются автоматически при запуске приложения.

Преимущества использования миграций:

- Версионирование схемы базы данных
- Автоматическое применение изменений
- Воспроизводимость процесса создания и обновления базы данных
- Возможность отката к предыдущим версиям
- Поддержка различных окружений (разработка, тестирование, продакшн)

Миграции базы данных хранятся в директории resources/db/migration и именуются в соответствии с принятым форматом: V{версия}__{описание}.sql.

2.3 Фреймворки и библиотеки

В разработке серверной части приложения используется ряд дополнительных фреймворков и библиотек, которые расширяют функциональность основных технологий и упрощают решение типовых задач.

2.3.1 Lombok

Lombok является библиотекой для сокращения шаблонного кода в Java. Она автоматически генерирует геттеры, сеттеры, конструкторы, методы equals(), hashCode(), toString() и другие стандартные элементы кода на основе аннотаций.

Использование Lombok позволяет:

- Сократить объем кода и повысить его читаемость
- Уменьшить вероятность ошибок при написании стандартных методов
- Ускорить разработку
- Облегчить поддержку кода

В проекте используются следующие аннотации Lombok:

- @Data - генерирует геттеры, сеттеры, toString(), equals(), hashCode()
- @Builder - реализует шаблон проектирования Builder
- @NoArgsConstructor, @AllArgsConstructor - генерирует конструкторы
- @Slf4j - создает логгер SLF4J
- @EqualsAndHashCode - генерирует методы equals() и hashCode()
- @ToString - генерирует метод toString()

2.3.2 MapStruct

MapStruct - это генератор кода для преобразования между Java-бинами. Он позволяет автоматически генерировать код для преобразования между объектами различных классов, что особенно полезно для преобразования между сущностями JPA и DTO (Data Transfer Objects).

Преимущества использования MapStruct:

- Генерация кода во время компиляции (отсутствие рефлексии в рантайме)
- Высокая производительность преобразования
- Безопасность типов
- Удобная конфигурация через аннотации
- Поддержка сложных преобразований (вложенные объекты, коллекции)
- Расширяемость через пользовательские преобразователи

В проекте MapStruct используется для преобразования между:

- Сущностями базы данных и DTO для передачи данных клиентам
- DTO запросов и сущностями для сохранения данных
- Различными представлениями одних и тех же данных

2.3.3 JWT (JSON Web Tokens)

Для реализации аутентификации и авторизации пользователей используется технология JWT (JSON Web Tokens). JWT представляет собой компактный, самодостаточный способ безопасной передачи информации между сторонами в виде JSON-объекта.

Основные компоненты JWT:

- Header (заголовок) - содержит информацию о типе токена и используемом алгоритме подписи
- Payload (полезная нагрузка) - данные пользователя и метаданные токена
- Signature (подпись) - обеспечивает целостность и аутентичность токена

Преимущества использования JWT:

- Stateless аутентификация - сервер не хранит состояние сессии
- Масштабируемость - возможность распределения нагрузки между серверами
- Поддержка микросервисной архитектуры
- Передача данных пользователя в самом токене
- Безопасность - токены подписываются секретным ключом

В проекте JWT интегрирован с Spring Security и используется для:

- Аутентификации пользователей
- Авторизации доступа к защищенным ресурсам
- Передачи информации о пользователе между компонентами системы
- Реализации механизма refresh токенов для обновления доступа

Используемые библиотеки для работы с JWT:

- jjwt-api - основной API для работы с JWT
- jjwt-impl - реализация JWT
- jjwt-jackson - интеграция с Jackson для сериализации/десериализации

2.3.4 RabbitMQ и Spring AMQP

Для реализации асинхронной обработки задач и обмена сообщениями между компонентами системы используется RabbitMQ - брокер сообщений, реализующий протокол AMQP (Advanced Message Queuing Protocol). Интеграция с RabbitMQ осуществляется через Spring AMQP - расширение Spring Framework для работы с AMQP.

Основные преимущества использования RabbitMQ:

- Надежная доставка сообщений
- Масштабируемость и высокая производительность
- Гибкая маршрутизация сообщений
- Поддержка различных паттернов обмена сообщениями (publish-subscribe, routing, topics)
- Сохранение сообщений на диске для обеспечения надежности
- Кластеризация для повышения доступности

В проекте RabbitMQ используется для:

- Асинхронной обработки уведомлений
- Отправки электронных писем
- Выполнения длительных операций по обработке изображений
- Реализации системы событий для обновления данных в реальном времени
- Балансировки нагрузки при пиковых нагрузках

Основные компоненты RabbitMQ, используемые в проекте:

- Обменники (Exchanges) - точки входа сообщений
- Очереди (Queues) - буферы для хранения сообщений
- Привязки (Bindings) - связи между обменниками и очередями
- Маршрутные ключи (Routing Keys) - правила маршрутизации сообщений

2.3.5 Библиотеки для работы с изображениями

Для обработки и анализа изображений в проекте используются следующие библиотеки:

1. Metadata Extractor (com.drewnoakes:metadata-extractor)
Библиотека для извлечения метаданных из изображений различных форматов. Используется для получения EXIF данных, информации о цветовом профиле, размерах и других характеристиках изображений.

2. Thumbnailator (net.coobird:thumbnailator)
Библиотека для создания миниатюр изображений с различными параметрами (размер, качество, формат). Обеспечивает высокую производительность и качество обработки изображений.

3. WebP ImageIO (org.sejda.imageio:webp-imageio)
Расширение для Java ImageIO, добавляющее поддержку формата WebP - современного формата изображений от Google, который обеспечивает лучшее сжатие по сравнению с JPEG и PNG.

Эти библиотеки используются для:
- Создания миниатюр различных размеров для адаптивного отображения на разных устройствах
- Оптимизации изображений для уменьшения объема данных
- Извлечения метаданных для анализа и категоризации изображений
- Конвертации между различными форматами
- Применения фильтров и эффектов

2.4 Инструменты обеспечения безопасности

В разработанном серверном приложении большое внимание уделяется вопросам безопасности. Используется комплексный подход, включающий несколько уровней защиты и различные технологии для противодействия распространенным угрозам.

2.4.1 Spring Security

Основой системы безопасности является фреймворк Spring Security, который обеспечивает аутентификацию, авторизацию и защиту от различных атак. Spring Security интегрирован во все слои приложения и предоставляет следующие возможности:

- Конфигурация защищенных и публичных ресурсов
- Поддержка различных механизмов аутентификации (JWT, OAuth2)
- Ролевая модель авторизации
- Защита от CSRF (Cross-Site Request Forgery) атак
- Защита от XSS (Cross-Site Scripting) уязвимостей
- Настройка политик безопасности контента (CSP)
- Интеграция с хранилищами учетных данных
- Фильтрация HTTP-запросов для обеспечения безопасности

Конфигурация Spring Security определена в классе SecurityConfig и включает:
- Настройку защиты эндпоинтов API
- Определение политик CORS (Cross-Origin Resource Sharing)
- Конфигурацию JWT-аутентификации
- Настройку обработчиков ошибок аутентификации и авторизации
- Определение правил доступа на основе ролей пользователей

2.4.2 Валидация входных данных

Для защиты от атак, связанных с передачей некорректных или опасных данных, в приложении используется многоуровневая валидация входных данных:

1. Bean Validation (JSR 380) для декларативной валидации объектов:
   - @NotNull, @NotBlank - проверка на обязательность полей
   - @Size, @Min, @Max - проверка размеров и границ значений
   - @Email - валидация адресов электронной почты
   - @Pattern - проверка соответствия регулярным выражениям

2. Кастомные валидаторы для сложных правил проверки:
   - Валидация паролей на сложность
   - Проверка уникальности логинов и адресов электронной почты
   - Валидация формата и размера загружаемых изображений
   - Проверка содержимого на соответствие правилам сообщества

3. Фильтрация и санитизация HTML-контента для предотвращения XSS-атак:
   - Удаление опасных HTML-тегов и атрибутов
   - Экранирование специальных символов
   - Проверка URL на безопасность

4. Валидация на уровне контроллеров с использованием аннотации @Valid и BindingResult для обработки ошибок валидации.

2.4.3 Защита от нагрузок и атак

Для обеспечения устойчивости системы к различным видам атак и аномальным нагрузкам используются следующие механизмы:

1. Ограничение частоты запросов (Rate Limiting):
   - Использование библиотеки Bucket4j для реализации алгоритма "токенное ведро"
   - Настройка различных лимитов для разных типов запросов
   - Приоритизация запросов авторизованных пользователей
   - Возврат кода ответа 429 (Too Many Requests) при превышении лимита

2. Защита от подбора паролей:
   - Задержка между неудачными попытками входа
   - Временная блокировка учетных записей после определенного числа неудачных попыток
   - Использование CAPTCHA при подозрительной активности

3. Защита от атак на подмену идентификаторов сессий:
   - Использование безопасных куки (secure, httpOnly)
   - Регулярная ротация токенов
   - Валидация IP-адресов и User-Agent

4. Мониторинг и обнаружение аномалий:
   - Логирование подозрительной активности
   - Анализ шаблонов доступа
   - Уведомления администраторов о потенциальных атаках

2.4.4 Шифрование данных

Для защиты конфиденциальных данных в приложении используются различные методы шифрования:

1. Хранение паролей:
   - Использование алгоритма BCrypt для хеширования паролей
   - Добавление "соли" для защиты от радужных таблиц
   - Настройка оптимальной вычислительной сложности хеширования

2. Защита данных в базе данных:
   - Шифрование чувствительных полей на уровне приложения
   - Использование встроенных механизмов шифрования PostgreSQL для определенных колонок
   - Ограничение доступа к данным через ролевую модель СУБД

3. Защита данных при передаче:
   - Использование HTTPS для всех взаимодействий с API
   - Настройка безопасных параметров TLS
   - Регулярное обновление сертификатов

2.5 Инструменты для работы с изображениями

Работа с изображениями является ключевым аспектом разработанного приложения. Для эффективной обработки, хранения и доставки визуального контента используется комплекс специализированных инструментов и технологий.

2.5.1 Обработка изображений

Для обработки загруженных пользователями изображений используется многоэтапный процесс, включающий следующие операции:

1. Валидация изображений:
   - Проверка допустимых форматов (JPEG, PNG, GIF, WebP)
   - Проверка размеров и пропорций
   - Сканирование на вредоносный код
   - Проверка соответствия контента правилам сообщества

2. Создание миниатюр:
   - Генерация миниатюр различных размеров для адаптивной выдачи
   - Оптимизация под различные устройства и сценарии использования
   - Сохранение качества изображений при уменьшении размеров
   - Учет ориентации изображения из метаданных EXIF

3. Оптимизация:
   - Сжатие с оптимальным соотношением качества и размера
   - Удаление избыточных метаданных
   - Конвертация в оптимальные форматы (WebP для современных браузеров, JPEG для остальных)
   - Прогрессивная загрузка для крупных изображений

4. Специальная обработка:
   - Автоматическое определение и кадрирование ключевой области изображения
   - Применение фильтров и коррекции для улучшения визуального восприятия
   - Добавление водяных знаков для защиты авторских прав (опционально)
   - Автоматическое выделение доминантных цветов для создания цветовых схем

2.5.2 Хранение изображений

Для эффективного хранения изображений используется комбинированный подход:

1. Файловая система:
   - Организация директорий по датам и категориям
   - Использование уникальных имен файлов на основе UUID
   - Резервное копирование с помощью инкрементальных бэкапов
   - Распределение нагрузки через шардинг по разным физическим хранилищам

2. База данных:
   - Хранение метаданных изображений (размеры, формат, цветовая схема)
   - Связь с моделями данных (пины, пользователи)
   - Индексирование для быстрого поиска
   - Статистика использования и просмотров

3. Кеширование:
   - Кеширование часто запрашиваемых изображений в памяти
   - Использование CDN для географического распределения контента
   - Настройка заголовков кеширования для оптимизации повторных запросов
   - Инвалидация кеша при изменении изображений

2.5.3 Анализ изображений

Для улучшения пользовательского опыта и оптимизации работы с изображениями используются методы анализа визуального контента:

1. Извлечение метаданных:
   - Анализ EXIF данных для получения информации о камере, настройках съемки, геолокации
   - Определение размеров и пропорций изображения
   - Извлечение цветовой информации и профилей ICC
   - Анализ данных о дате создания и модификации

2. Цветовой анализ:
   - Определение доминантных цветов
   - Создание цветовых палитр
   - Классификация по цветовой гамме
   - Анализ контрастности и насыщенности

3. Семантический анализ:
   - Подготовка к интеграции с системами компьютерного зрения для автоматической категоризации
   - Распознавание объектов на изображениях
   - Определение стилей и типов изображений
   - Выявление неприемлемого контента

2.6 Технологии асинхронного взаимодействия

Для обеспечения высокой производительности и отзывчивости системы при высоких нагрузках в приложении используются различные технологии асинхронного взаимодействия.

2.6.1 RabbitMQ и обмен сообщениями

Основой системы асинхронной обработки является брокер сообщений RabbitMQ, который используется для:

1. Обработки уведомлений:
   - Публикация событий о действиях пользователей
   - Асинхронная доставка уведомлений подписчикам
   - Группировка и агрегация событий перед отправкой
   - Отложенные уведомления по расписанию

2. Отправки электронных писем:
   - Постановка в очередь задач на отправку писем
   - Повторные попытки при неудачной отправке
   - Приоритизация важных сообщений
   - Рассылка массовых уведомлений

3. Обработки изображений:
   - Очереди задач на генерацию миниатюр
   - Асинхронная оптимизация и анализ загруженных изображений
   - Распределение нагрузки между обработчиками
   - Отслеживание прогресса обработки

Основные очереди и обменники в RabbitMQ:
- notification.exchange - обменник для событий уведомлений
- email.queue - очередь для задач на отправку писем
- image.processing.queue - очередь задач обработки изображений
- event.tracking.queue - очередь для аналитических событий

2.6.2 Spring Async и многопоточная обработка

Для асинхронного выполнения операций внутри приложения используется механизм Spring Async:

- Аннотация @Async для обозначения методов, выполняемых асинхронно
- Настройка пулов потоков для различных типов задач
- Обработка результатов асинхронных операций с помощью CompletableFuture
- Обработка исключений в асинхронных методах

Типы задач, выполняемых асинхронно:
- Отправка уведомлений
- Логирование действий пользователей
- Обновление статистики и счетчиков
- Фоновая обработка данных

2.6.3 Server-Sent Events (SSE)

Для доставки уведомлений пользователям в реальном времени используется технология Server-Sent Events (SSE):

- Односторонний канал связи от сервера к клиенту
- Автоматическое восстановление соединения при разрывах
- Эффективное потребление ресурсов по сравнению с poll-запросами
- Возможность фильтрации событий на стороне сервера

2.7 Средства мониторинга и оптимизации

Для обеспечения стабильной работы и оптимальной производительности системы используются различные средства мониторинга и оптимизации.

2.7.1 Spring Boot Actuator и Micrometer

Spring Boot Actuator предоставляет готовые эндпоинты для мониторинга и управления приложением:

- /actuator/health - информация о состоянии приложения
- /actuator/metrics - метрики производительности
- /actuator/info - информация о приложении
- /actuator/env - информация об окружении
- /actuator/loggers - управление уровнями логирования

Micrometer используется как фасад для различных систем мониторинга:
- Сбор метрик производительности
- Мониторинг использования ресурсов
- Отслеживание времени выполнения запросов
- Сбор данных об ошибках и исключениях

2.7.2 Кеширование с Caffeine

Для оптимизации производительности и уменьшения нагрузки на базу данных используется библиотека Caffeine - высокопроизводительная библиотека кеширования в памяти:

- Настройка различных политик вытеснения кеша
- Определение максимального размера кеша
- Настройка времени жизни элементов кеша
- Асинхронная загрузка кеша
- Мониторинг метрик кеширования (попадания, промахи, вытеснения)

Основные кеши в приложении:
- userCache - кеширование данных пользователей
- pinCache - кеширование популярных пинов
- boardCache - кеширование досок
- searchCache - кеширование результатов популярных поисковых запросов
- configCache - кеширование конфигурационных данных

2.7.3 Prometheus и Grafana

Для визуализации метрик и мониторинга производительности в реальном времени используются:

- Prometheus - для сбора и хранения метрик
- Grafana - для создания интерактивных дашбордов и визуализации данных

Основные метрики, отслеживаемые системой мониторинга:
- Время отклика API-запросов
- Количество запросов в секунду
- Использование ресурсов (ЦП, память, диск)
- Количество активных пользователей
- Количество ошибок и исключений
- Производительность базы данных
- Использование кеша
- Задержки асинхронных операций 